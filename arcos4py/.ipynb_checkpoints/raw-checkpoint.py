{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Raw Functions\n",
    "\n",
    "def get_raw_county_data(state, county = '',verification = True, key = 'WaPo'):\n",
    "    '''(str(two letter abbreviation), bool, str, str) -> pd.df\n",
    "        Returns all data by county (Will be large and could take extra time to load)\n",
    "\n",
    "        >>>get_raw_county_data('OH', 'Summit')\n",
    "            EXAMPLE OUTPUT\n",
    "    '''\n",
    "\n",
    "    base_url = 'https://arcos-api.ext.nile.works/v1/'\n",
    "    function_url = 'county_data?'\n",
    "    add_state = 'state=' + state\n",
    "    add_county = '&county=' + county\n",
    "    add_key = '&key=' + key\n",
    "    full_url = base_url + function_url + add_state + add_county + add_key\n",
    "\n",
    "    if verification == True:\n",
    "        print(full_url)\n",
    "        county_data_df = json_normalize(requests.get(full_url).json())\n",
    "        return county_data_df\n",
    "    else:\n",
    "        print('Problem encountered, not returning data:')\n",
    "        print('Either verification == False')\n",
    "        print('Or problem with API encountered, please verify URL, state and county are correct: ', full_url)\n",
    "        \n",
    "def get_raw_buyer_details(state, county = '',verification = True, key = 'WaPo'):\n",
    "    '''(str(two letter abbreviation), bool, str, str) -> pd.df\n",
    "        Returns buyer details (mail order, pharmacy, retail, practitioner, etc)\n",
    "\n",
    "        >>>get_raw_buyer_details('OH', 'Summit')\n",
    "            EXAMPLE OUTPUT\n",
    "    '''\n",
    "\n",
    "    base_url = 'https://arcos-api.ext.nile.works/v1/'\n",
    "    function_url = 'buyer_details?'\n",
    "    add_state = 'state=' + state\n",
    "    add_county = '&county=' + county\n",
    "    add_key = '&key=' + key\n",
    "    full_url = base_url + function_url + add_state + add_county + add_key\n",
    "\n",
    "    if verification == True:\n",
    "        print(full_url)\n",
    "        buyer_details_df = json_normalize(requests.get(full_url).json())\n",
    "        return buyer_details_df\n",
    "    else:\n",
    "        print('Problem encountered, not returning data:')\n",
    "        print('Either verification == False')\n",
    "        print('Or problem with API encountered, please verify URL, state and county are correct: ', full_url)\n",
    "        \n",
    "def get_raw_reporter_details(state, county = '',verification = True, key = 'WaPo'):\n",
    "    '''(str(two letter abbreviation), bool, str, str) -> pd.df\n",
    "        Returns Reporter (Manufacturers and Distributors) details such as addresses\n",
    "\n",
    "        >>>get_raw_reporter_details('OH', 'Summit')\n",
    "            EXAMPLE OUTPUT\n",
    "    '''\n",
    "\n",
    "    base_url = 'https://arcos-api.ext.nile.works/v1/'\n",
    "    function_url = 'reporter_details?'\n",
    "    add_state = 'state=' + state\n",
    "    add_county = '&county=' + county\n",
    "    add_key = '&key=' + key\n",
    "    full_url = base_url + function_url + add_state + add_county + add_key\n",
    "\n",
    "    if verification == True:\n",
    "        print(full_url)\n",
    "        reporter_details_df = json_normalize(requests.get(full_url).json())\n",
    "        return reporter_details_df\n",
    "    else:\n",
    "        print('Problem encountered, not returning data:')\n",
    "        print('Either verification == False')\n",
    "        print('Or problem with API encountered, please verify URL, state and county are correct: ', full_url)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
